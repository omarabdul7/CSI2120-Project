#lang scheme
;Zeyad Abu-El-Quran 
;300167089

;Yusuf Khan 
;300293842 

; Reads the queryHistogram
; Input: file path
; Output: List of bins
(define (readHistogramQuery queryPath)
  (with-input-from-file queryPath
    (lambda ()
      (let ((ignore (read-line)) ; Read and ignore the first line
            (line (read-line)))  ; Read the second line for the histogram data
        (if line
            (map string->number (string-split line " ")) ; Split by spaces and convert to numbers
            '())))))

; Remove last element of list if necessary, corrected to ensure it's not required by proper file handling
(define (removeLast lst)
  (if (null? (cdr lst))
      '()
      (cons (car lst) (removeLast (cdr lst)))))

; Read histograms from the dataset
; Input: file path
; Output: List of bins
(define (readDataset dataset)
  (with-input-from-file dataset
    (lambda ()
      (read-line) ; First line has size (skip)
      (let ((line (read-line)))
        (if line
            (let ((histogram (map string->number (regexp-split #rx" " line))))
              (cons (extractFileName dataset) histogram))
            '())))))

; Load histograms data
; Input: Folder path
; Output: Dataset Histograms
(define (loadHistograms dataset)
  (filter (lambda (entry) (not (null? (cdr entry))))
          (map (lambda (file)
                 (readDataset (build-path dataset file)))
               (directory-list dataset))))

; Turns file path into filename
(define (extractFileName dataset)
  (list-ref (reverse (regexp-split #rx"/" dataset)) 0))

; Function that runs the program
; Input: query histogram + dataset path
; Output: Prints top 5 results
(define (getSimilarImages queryHistogram dataset)
  (define datasetHistograms (loadHistograms dataset))

(define (compare histogram1 histogram2)
  (let* ((length1 (length histogram1))
         (length2 (length histogram2))
         (min-length (min length1 length2))
         (trimmed-histogram1 (take histogram1 min-length))
         (trimmed-histogram2 (take histogram2 min-length))
         (sum-mins (apply + (map min trimmed-histogram1 trimmed-histogram2)))
         (sum-h1 (apply + (take histogram1 min-length)))) ; Assuming comparison is against the first histogram
    (/ sum-mins sum-h1)))


  ;; Get similarity of query histogram and each one from the dataset
  (define scores
    (map (lambda (entry)
           (let* ((datasetName (car entry))
                  (datasetHistogram (cdr entry))
                  (similarity (compare queryHistogram datasetHistogram)))
             (cons datasetName similarity)))
         datasetHistograms))

  ;; Sort similarity scores
   (define sortedScores
    (sort scores
          (lambda (score1 score2)
            (> (cdr score1) (cdr score2)))))

  ;; Display results
  (printf "Top 5 most similar images:\n")
  (for-each (lambda (score)
              (printf "~a: Similarity ~a\n" (car score) (cdr score)))
            (take sortedScores 5)))

  ; No need to return from getSimilarImages, as results are printed directly

; Defining our base variables
; Query Histogram (Modify this to change the image)
(define queryHistogram (readHistogramQuery "histograms/q00.txt"))
; Dataset
(define dataset "histogramsDataset")

; Find Similar Images
; Input: query histogram + dataset path
; Output: Most similar images
(getSimilarImages queryHistogram dataset)
